---
import { wKey } from '@utils/index.ts';
import type { ComponentProps, HTMLAttributes } from 'astro/types';
import type { WithChildren } from '../../types.ts';
import Form from './Form.astro';
import HiddenInput from './HiddenInput.astro';
import Label from './Label.astro';

type InputAttributes = WithChildren<false, HTMLAttributes<'input'>>;
type LabelAttributes = WithChildren<false, HTMLAttributes<'label'>>;

/**
 * Props for a single input entry within the group.
 *
 * @property label - Label configuration including text and HTML attributes
 * @property input - Input element configuration and HTML attributes
 */
export interface EntryProps {
	label: LabelAttributes & {
		text: string;
	};
	input: InputAttributes;
}

/**
 * Props for a grouped set of related inputs (ex. radio buttons or checkboxes).
 *
 * @property title - The heading text for the input group
 * @property type - The input type (ex. 'radio', 'checkbox')
 * @property entries - Array of input configurations to render
 */
interface Props extends Omit<ComponentProps<typeof Form>, 'children'> {
	title: Capitalize<string>;
	type: InputAttributes['type'];
	entries: EntryProps[];
}

const { id, name, title, type, entries, ...restProps } = Astro.props;

const computedId = id ?? name;
---

<hgroup {...wKey(computedId, 'hgroup')}>
	<h3 {...wKey(computedId, 'h3')}>
		{title}
	</h3>
	<Form
		{...restProps}
		{...wKey(computedId, 'form')}
		id={computedId}
		name={computedId}
	>
		{
			entries.map(({ label, input }) => {
				const { text, ...restLabelProps } = label;

				return (
					<Label {...restLabelProps}>
						<HiddenInput {...input} name={computedId} {type} />
						{text}
					</Label>
				);
			})
		}
	</Form>
</hgroup>
