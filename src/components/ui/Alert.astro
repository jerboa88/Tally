---
import { getLocaleMessages } from '@i18n/index.ts';
import { Info, OctagonX, type Icon as IconType } from '@lucide/astro';
import type { HTMLAttributes } from 'astro/types';
import type { WithChildren } from '../../types.ts';
import Icon from './Icon.astro';
import Strong from './Strong.astro';

/**
 * The alert type determining icon, color, and styling.
 */
type Type = 'note' | 'error';

/**
 * Props for an alert/notification aside with configurable styling.
 *
 * Used by Markdoc for rendering alert blocks in markdown content.
 *
 * @property type - The alert type ('note' or 'error')
 */
interface Props extends WithChildren<true, HTMLAttributes<'aside'>> {
	type?: Type;
}

const iconMap = {
	note: Info,
	error: OctagonX,
} as { [key in Type]: typeof IconType };

const { type = 'note', ...restProps } = Astro.props;

const title = getLocaleMessages(Astro).alert[type].title;
const icon = iconMap[type];
---

<aside role="note" data-type={type} {...restProps}>
	<Strong>
		<Icon {icon} />
		{title}
	</Strong>
	<slot />
</aside>

<style>
	aside {
		display: flex;
		flex-direction: column;
		gap: var(--p-sm);
		padding: var(--p-md);
		border-radius: var(--r-md);
		border: var(--b-md) solid var(--p);

		> strong {
			display: inline-flex;
			flex-direction: row;
			align-items: center;
			gap: var(--p-xs);
			color: var(--p);
			font-family: var(--f-header);
		}

		> p {
			margin: 0;
		}
	}

	[data-type='error'] {
		border-color: var(--e);

		> strong {
			color: var(--e);
		}
	}
</style>
