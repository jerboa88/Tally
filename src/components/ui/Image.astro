---
import {
	Image as AstroImage,
	Picture as AstroPicture,
	type LocalImageProps,
	type RemoteImageProps,
} from 'astro:assets';
import type { WithChildren } from '../../types.ts';

/**
 * Props for an optimized image component that handles both local and remote images. Used by Markdoc.
 *
 * Automatically uses SVG format for .svg files and modern formats (AVIF, WebP) for other images.
 */
type Props = WithChildren<false, LocalImageProps | RemoteImageProps>;

/**
 * Extracts the source URL string from various image source types.
 *
 * @param src - The image source (string URL, ImageMetadata, or Promise)
 * @returns An object containing the source string and whether it's a remote URL
 */
async function getSrcString(src: Props['src']) {
	if (typeof src === 'string') {
		return {
			src,
			isRemote: true,
		};
	}

	if ('src' in src) {
		return {
			src: src.src,
			isRemote: false,
		};
	}

	return {
		src: (await src).default.src,
		isRemote: false,
	};
}

const props = Astro.props;

const { src: srcString, isRemote } = await getSrcString(props.src);

const isSvg = srcString.endsWith('.svg');
const commonProps = {
	inferSize: isRemote,
	...props,
} as const satisfies Props;
---

{
	isSvg ? (
		<AstroImage {...commonProps} format="svg" />
	) : (
		// We can't use CSS variables in the sizes attribute, but this must match var(--max-w) defined in src/styles/vars.css
		<AstroPicture
			{...commonProps}
			formats={['avif', 'webp']}
			sizes="auto,(width<=56rem) 100vw,56rem"
		/>
	)
}

<style>
	image,
	picture {
		contain: size;
	}
</style>
